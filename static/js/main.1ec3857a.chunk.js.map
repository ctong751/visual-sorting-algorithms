{"version":3,"sources":["logo.svg","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","algorithms/bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","length","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSort","a","b","temp","left","right","pivot","getHeapSortAnimations","sortedArray","buildHeap","heapSort","console","log","size","index","largest","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","bubbleSort","getBubbleSortAnimations","className","map","value","idx","onClick","mergeSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ec3857a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\n    const animations = [];\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","export function getQuickSortAnimations(array) {\n    const animations = [];\n    const sortedArray = array;\n    quickSort(sortedArray, 0, array.length - 1, animations);\n    // Push to change all bars to green since the sorting is complete.\n    animations.push([3]);\n    return animations;\n}\n\nfunction quickSort(array, a, b, animations) {\n    if (a >= b) return;\n\n    let left = a;\n    let right = b - 1;\n    // Choose the last element in the array to be the pivot.\n    let pivot = array[b];\n    // Change the pivot bar to red.\n    animations.push([0, b, 0]);\n    // Temporary object used for swapping.\n    let temp;\n\n    while (left <= right) {\n        while (left <= right && array[left] < pivot) {\n            left++;\n        }\n        while (left <= right && array[right] >= pivot) {\n            right--;\n        }\n        if (left <= right) {\n            temp = array[left];\n            array[left] = array[right];\n            array[right] = temp;\n            // Comparing these values. Need to change their color to yellow.\n            animations.push([1, left, 0]);\n            animations.push([1, right, 0]);\n            // Now change the colors to green since they're being swapped.\n            animations.push([2, left, array[left]]);\n            animations.push([2, right, array[right]]);\n            left++;\n            right--;\n        }\n    }\n    temp = array[left];\n    array[left] = array[b];\n    array[b] = temp;\n    // Change the colors to green since they're being swapped.\n    animations.push([2, left, array[left]]);\n    animations.push([2, b, array[b]]);\n\n    // Make recursive calls.\n    quickSort(array, a, left - 1, animations);\n    quickSort(array, left + 1, b, animations);\n}\n\n","export function getHeapSortAnimations(array) {\n    const animations = [];\n    const sortedArray = array;\n    heapSort(sortedArray, animations);\n    console.log(sortedArray);\n    console.log(animations);\n    return animations;\n}\n\nfunction heapSort(array, animations) {\n    for (let i = array.length / 2 - 1; i >= 0; i--) {\n        buildHeap(array, array.length, i, animations);\n    }\n\n    for (let i = array.length - 1; i > 0; i--) {\n        animations.push([0, 0, 0]);\n        animations.push([0, i, 0]);\n        var temp = array[0];\n        array[0] = array[i];\n        array[i] = temp;\n        animations.push([2, 0, array[0]]);\n        animations.push([2, i, array[i]]);\n\n        buildHeap(array, i, 0, animations);\n    }\n}\n\nfunction buildHeap(array, size, index, animations) {\n    let largest = index;\n    let left = 2 * index + 1;\n    let right = 2 * index + 2;\n\n    if (left < size && array[left] > array[largest]) {\n        largest = left;\n    }\n\n    if (right < size && array[right] > array[largest]) {\n        largest = right;\n    }\n\n    if (largest !== index) {\n        animations.push([0, index, 0]);\n        animations.push([0, largest, 0]);\n        let temp = array[index];\n        array[index] = array[largest];\n        array[largest] = temp;\n        animations.push([1, index, array[index]]);\n        animations.push([1, largest, array[largest]]);\n\n        buildHeap(array, size, largest, animations);\n    }\n}","import React, { useDebugValue } from 'react';\nimport {getMergeSortAnimations} from '../algorithms/mergeSort.js';\nimport { getQuickSortAnimations } from '../algorithms/quickSort.js';\nimport { getBubbleSortAnimations } from '../algorithms/bubbleSort.js';\nimport './SortingVisualizer.css';\nimport { getHeapSortAnimations } from '../algorithms/heapSort.js';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < 100; i++) {\n            array.push(randIntFromInterval(5, 1000));\n        }\n        this.setState({array});\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = 'DodgerBlue';\n        }\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? 'red' : 'green';\n                setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * 10);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * 10);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [color, index, height] = animations[i];\n            switch (color) {\n                case 0:\n                    // Sets the pivot array-bar to the color red.\n                    setTimeout(() => {\n                        arrayBars[index].style.backgroundColor = 'red';\n                    }, i * 10);\n                    break;\n                case 1:\n                    // Sets the array-bar being compared to the color yellow.\n                    setTimeout(() => {\n                        arrayBars[index].style.backgroundColor = 'yellow';\n                    }, i * 10);\n                    break;\n                case 2:\n                    // Swaps the array-bar value and sets the color to green.\n                    setTimeout(() => {\n                        arrayBars[index].style.height = `${height}px`;\n                        arrayBars[index].style.backgroundColor = 'green';\n                    }, i * 10);\n                    break;\n                case 3:\n                    // Sets the array-bar color to green.\n                    setTimeout(() => {\n                        for (let i = 0; i < arrayBars.length; i++) {\n                            arrayBars[i].style.backgroundColor = 'green';\n                        }\n                    }, i * 10);\n                    break;\n                default:\n                    // Do nothing\n                    break;\n            }\n        }\n    }\n\n    heapSort() {\n        const animations = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [color, index, height] = animations[i];\n            switch (color) {\n                case 0:\n                    // Sets the pivot array-bar to the color red.\n                    setTimeout(() => {\n                        arrayBars[index].style.backgroundColor = 'red';\n                    }, i * 7);\n                    break;\n                case 1:\n                    // Swaps the array-bar value and sets the color to blue.\n                    setTimeout(() => {\n                        arrayBars[index].style.height = `${height}px`;\n                        arrayBars[index].style.backgroundColor = 'DodgerBlue';\n                    }, i * 7);\n                    break;\n                case 2:\n                    // Swaps the array-bar value and sets the color to green.\n                    setTimeout(() => {\n                        arrayBars[index].style.height = `${height}px`;\n                        arrayBars[index].style.backgroundColor = 'green';\n                    }, i * 7);\n                    break;\n                default:\n                    // Do nothing\n                    break;\n            }\n        }\n    }\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [index, height] = animations[i];\n            // Swaps the array-bar value and sets the color to green.\n            setTimeout(() => {\n                arrayBars[index].style.height = `${height}px`;\n            }, i * 2);\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                <div\n                    className=\"array-bar\"\n                    key={idx}\n                    style={{\n                    backgroundColor: 'DodgerBlue',\n                    height: `${value}px`,\n                    }}></div>\n                ))}\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n            </div>\n        );\n    }\n}\n\nfunction randIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction sortingTest(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) {\n        console.log('Different lengths.')\n        return false;\n    }\n\n    for (let i = 0; i < arrayOne.length - 1; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            console.log('Inconsistency at index: ' + i);\n            return false;\n        }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    const sortedArray = array;\n    bubbleSort(sortedArray, animations);\n    return animations;\n}\n\nfunction bubbleSort(array, animations) {\n    for (let i = 0; i < array.length - 1; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n                // Change array-bar values since they're being swapped.\n                animations.push([j, array[j]]);\n                animations.push([j + 1, array[j + 1]]);\n            }\n        }\n    }\n}","import logo from './logo.svg';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}